
const axios = require('axios');
const models = require( __dirname + '/gptModels');
const roles = require(__dirname + '/gptRoles');
class gptMessage  {
    constructor(text, role) {
        this.content = text;
        this.role = role;
    }

    get apiObj() {
        return { "role" : this.role, "content" : [{type : 'text', text: this.content}] };
    }
}

class gptImageMessage extends gptMessage {
    constructor(text, role, url) {
        super(text, role);
        this.url = url;
    }

    get apiObj() {
        if(!this.content){
            return { "role" : this.role, "content" : [{type : 'image_url', image_url: {"url": this.url}}] };
        }
        return { "role" : this.role, "content" : [{type : 'image_url', image_url: {"url": this.url}}, {type : 'text', text: this.content}] };
    }
}
const gptApiUrl = "https://api.openai.com/v1/chat/completions"

const askGptWithHistory = async (model, history, apiKey) => {
    const body = {
        model,
        messages : history.map((message) => {return message.apiObj}),
        n: 1,
    }
    if(model === models.GPT4VISION){
        body.max_tokens = 4096;
    }
    const headers = {
        'Authorization': 'Bearer ' + apiKey,
        'Content-Type': 'application/json',
    }
    return axios.post(gptApiUrl, body, {headers}).then((res) => {
        return res.data.choices[0].message.content;
    });
}

// const gptVision = async (messages, picUrl, apiKey) => {
//     const body = {
//         model : "gpt-4-vision-preview",
//         messages : messages,
//         max_tokens: 3000,
//     }
//     const headers = {
//         'Authorization': 'Bearer ' + apiKey,
//         'Content-Type': 'application/json',
//     }
//     return axios.post(gptApiUrl, body, {headers}).then((res) => {
//         console.log(res)
//         console.log(res.data)
//         return res.data.choices[0].message.content;
//     });
// }

module.exports = {
    askGptWithHistory,
    gptMessage,
    gptImageMessage,
    models,
    roles,
}